---
title: 'Inferência: testes de permutação e p-valores'
author: "Nazareno Andrade"
output: 
  html_notebook:
    theme: readable
    fig_width: 7
    toc: true
    toc_float: true
editor_options: 
  chunk_output_type: inline
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
theme_set(theme_bw())
```

# Intro

Técnicas de Reamostragem = {Bootstrap, Permutação, (jacknifing), ...}

Disclaimer: em princípio tudo pode ser feito através de ICs, porém você verá e ouvirá falar muito de p-valores e testes como t-test, mann-withney, wilcoxon e Chi-squared. Então falaremos deles também. 

## Os dados

```{r}
ratings_raw <- read_csv("dados/ml-latest-small/ratings.csv", col_types = "ccdi")
movies <- read_csv("dados/ml-latest-small/movies.csv", col_types = "ccc")
ratings = full_join(ratings_raw, movies, by = "movieId")

glimpse(ratings)
```

Focaremos em alguns episódios de Star Wars

```{r}
sw = ratings %>% filter(grepl("Star Wars", title) & 
                          (grepl("Episode IV -", title) | 
                             grepl("Episode I -", title) | 
                             grepl("Episode V -", title)))

sw = ratings %>% filter(grepl("Star Wars", title) & 
                          (grepl("Episode ", title)))


ggplot(sw, aes(y = rating, x = title)) + 
    #geom_count(alpha = .4) + 
  stat_summary(fun.data = "mean_cl_boot") + 
  coord_flip()

nomes_episodios = c("Star Wars: Episode I - The Phantom Menace (1999)", 
                    "", # não usamos
                    "", # não usamos
                    "Star Wars: Episode IV - A New Hope (1977)", 
                    "Star Wars: Episode V - The Empire Strikes Back (1980)", 
                    "Star Wars: Episode VI - Return of the Jedi (1983)")
 
sw5x6 = sw %>% 
  filter(title %in% c(nomes_episodios[5], 
                      nomes_episodios[6])) %>% 
  select(title, rating)

sw4x5 = sw %>% 
  filter(title %in% c(nomes_episodios[4], 
                      nomes_episodios[5])) %>% 
  select(title, rating)
```


```{r}
meu_theta = function(x, i){
    media_iv = x %>% 
        slice(i) %>% 
        filter(title == "Star Wars: Episode IV - A New Hope (1977)") %>% 
        pull(rating) %>% 
        mean()
    
    media_v = x %>% 
        slice(i) %>% 
        filter(title != "Star Wars: Episode IV - A New Hope (1977)") %>% 
        pull(rating) %>% 
        mean()
    
    media_v - media_iv
}

resultado = sw4x5 %>% 
    boot(statistic = meu_theta, 
         R = 2000)


boot.ci(boot.out = resultado, 
        conf = 0.95, 
        type = "basic")
    
```


# Nosso framework

## Manual

Vamos guardar as diferenças observadas na nossa amostra para o episódio 5 x 6.

```{r}
medias5x6 = sw5x6 %>% 
  group_by(title) %>% 
  summarise(media = mean(rating))

medias5x6

diff.media.observada.5x6 = diff(medias5x6$media)
```

Mesma coisa para o episódio 4 x 5.

```{r}
medias4x5 = sw4x5 %>% 
  group_by(title) %>% 
  summarise(media = mean(rating))

medias4x5

diff.media.observada.4x5 = diff(medias4x5$media)

```


Agora vejamos o quão frequente seria encontrarmos uma diferença do tamanho que encontramos *se não houvesse associação nenhuma entre qual é o episódio e qual é a avaliação que ele recebe*. A situação onde não existe associação é a *hipótese nula*. Se a diferença que observamos em nossa amostra acontece facilmente na hipótese nula, isso significa que não temos evidência forte de associação: o que observamos acontece também quando não há associação. 

No caso onde a diferença que observamos é improvável na hipótese nula, então observamos algo que é indicativo de associação. Repare que é uma dupla negação: se **não acontece** associação como a que vimos na amostra na situação onde **não** há associação, então temos evidência de que há associação. 

Concretameente, para os Episódios 5 x 6:

```{r}
set.seed(1)
glimpse(sw5x6)
diffs = replicate(10000, {
  medias = sw5x6 %>% 
    mutate(id_embaralhado = sample(title, n())) %>% 
    group_by(id_embaralhado) %>% 
    summarise(media = mean(rating))
  e1 = medias %>% 
    filter(id_embaralhado == nomes_episodios[5])
  e4 = medias %>% 
    filter(id_embaralhado == nomes_episodios[6])
  return(e1$media - e4$media)
})
glimpse(diffs)
tibble(diferenca = diffs) %>% 
  ggplot(aes(x = diferenca)) + 
  geom_histogram(bins = 30) + 
  geom_vline(xintercept = diff.media.observada.5x6)

# p-valor
sum(abs(diffs) >= abs(diff.media.observada.5x6)) / length(diffs)
```

Episódio 4 x 5

```{r}
set.seed(1)
glimpse(sw4x5)
diffs = replicate(10000, {
  medias = sw4x5 %>% 
    mutate(id_embaralhado = sample(title, n())) %>% 
    group_by(id_embaralhado) %>% 
    summarise(media = mean(rating))
  e5 = medias %>% 
    filter(id_embaralhado == nomes_episodios[5])
  e4 = medias %>% 
    filter(id_embaralhado == nomes_episodios[4])
  return(e4$media - e5$media)
})

tibble(diferenca = diffs) %>% 
  ggplot(aes(x = diferenca)) + 
  geom_histogram(bins = 30) + 
  geom_vline(xintercept = diff.media.observada.4x5, size = 2)

sum(abs(diffs) >= abs(diff.media.observada.4x5)) / length(diffs)
```

## Pacote coin

Teste da média

```{r}
library(coin)
oneway_test(rating ~ as.factor(title), 
            data = sw5x6, 
            distribution = "exact")

oneway_test(rating ~ as.factor(title), 
            data = sw4x5, 
            distribution = "exact") %>% 
  pvalue()

```

Teste de que a mediana das populações de onde vieram as avaliações dos episódios são diferentes:

```{r}
median_test(rating ~ as.factor(title), 
            data = sw5x6, 
            distribution = "exact")


median_test(rating ~ as.factor(title), 
            data = sw4x5, 
            distribution = "exact")

permutationTest2(sw4x5, median(rating), treatment = title)$stats %>% t()
```


## Por que two-tailed

Normalmente estamos interessados em rejeitar a hipótese nula da igualdade. A igualdade está em torno do zero, e portanto a rejeição acontece quando o valor observado está longe de zero em qualquer direção. Existem testes one-tailed que não dão informação sobre se há diferença nas duas direções. Porém na prática é uma prática requerida que você decida o teste antes de realizá-lo, e é difícil decidir que apenas diferenças em uma direção serão relevantes. Além disso, devido à pressão por resultado, decidir usar one-tailed é sempre um truque que aumenta sua chance de produzir um teste com diferença significativa, o que é claramente uma manipulação na sua metodologia.

# Testes conhecidos que você pode encontrar

## Mann-withney-wilcoxon

Testa se a soma dos ranks das duas amostras são significativamente diferentes.

```{r}
library("coin")
wilcox_test(rating ~ as.factor(title), 
            data = sw5x6, 
            distribution = "exact") # tirando este parâmetro, usamos fórmula fechada em lugar de permutação
```

## Chi-squared para associação entre duas variávies categóricas

```{r}
titanic = read.csv("dados/titanic.csv")
titanic = titanic %>% 
  mutate(Survived = as.factor(Survived), 
         Pclass = as.factor(Pclass))

table(titanic$Survived, titanic$Pclass)

chisq.test(titanic$Survived, titanic$Pclass, simulate.p.value = TRUE)

chisq.test(titanic$Survived, titanic$Pclass, simulate.p.value = TRUE)$resid

library(gmodels)
CrossTable(titanic$Survived, 
           titanic$Pclass, 
           prop.t = F,
           resid = TRUE)

# library(vcd)
#mosaic(table(titanic$Survived, titanic$Pclass), shade = TRUE)
```

Outro

```{r}
titanic2 <- read.csv(url("http://whitlockschluter.zoology.ubc.ca/wp-content/data/chapter09/chap09f1.1Titanic.csv"))
head(titanic2)
titanicTable <- table(titanic2$survival, titanic2$sex)
addmargins(titanicTable)

mosaicplot(t(titanicTable), 
           cex.axis = 1, 
           sub = "Sex", 
           ylab = "Relative frequency", main = "")

library(vcd)
mosaic(table(titanic2$survival, titanic2$sex))
mosaic(HairEyeColor, shade = TRUE)
chisq.test(titanic2$sex, titanic2$survival, simulate.p.value = TRUE)
```

## Outra alternativa: pacote resample

Os p-valores dão diferente daqueles calculados pelo pacote `coin`, e ainda não descobri a razão exata.

```{r}
library(resample)

permutationTest2(data = sw5x6, statistic = mean(rating), treatment = title)

permutationTest2(data = sw5x6 %>% filter(title == nomes_episodios[6]), 
                 statistic = mean(rating), 
                 data2 = sw5x6 %>% filter(title == nomes_episodios[5]))

permutationTest2(sw4x5, mean(rating), treatment = title)

permutationTest2(sw1x4, median(rating), treatment = title)
permutationTest2(sw4x5, median(rating), treatment = title)
```

